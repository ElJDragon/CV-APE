/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vistas;

import BD.ConexionBD;
import Controladores.RecordatorioControlador;
import Modelos.Recordatorio;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingWorker;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;

/**
 *
 * @author Lenovo Ideapad
 */
public class BuscarEventoVista1 extends javax.swing.JFrame {

    /**
     * Creates new form BuscarEventoVista1
     */
    private int id_usu;
    private Connection conn=new ConexionBD().conectar();
    private RecordatorioControlador controlador;
    private ConexionBD bd;

   

    public BuscarEventoVista1(int id_usu) {
        this.id_usu = id_usu;
        this.controlador = new RecordatorioControlador(conn, id_usu);
        initComponents();
        createCustomUI();
        buscarEventos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelResultados = new javax.swing.JPanel();
        jScroll = new javax.swing.JScrollPane();
        jPanelFiltros = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        spinnerDesde = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        spinnerHasta = new javax.swing.JSpinner();
        chkUsarFechas = new javax.swing.JCheckBox();
        btnBuscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout panelResultadosLayout = new javax.swing.GroupLayout(panelResultados);
        panelResultados.setLayout(panelResultadosLayout);
        panelResultadosLayout.setHorizontalGroup(
            panelResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
        );
        panelResultadosLayout.setVerticalGroup(
            panelResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelResultadosLayout.createSequentialGroup()
                .addComponent(jScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );

        jLabel1.setText("Titulo");

        txtTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTituloActionPerformed(evt);
            }
        });

        jLabel2.setText("Fecha Desde");

        jLabel3.setText("Fecha Hasta");

        chkUsarFechas.setText("Filtrar por fechas");
        chkUsarFechas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUsarFechasActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFiltrosLayout = new javax.swing.GroupLayout(jPanelFiltros);
        jPanelFiltros.setLayout(jPanelFiltrosLayout);
        jPanelFiltrosLayout.setHorizontalGroup(
            jPanelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFiltrosLayout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addGroup(jPanelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFiltrosLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(chkUsarFechas)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelFiltrosLayout.createSequentialGroup()
                        .addGroup(jPanelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFiltrosLayout.createSequentialGroup()
                                .addComponent(btnBuscar)
                                .addGap(111, 111, 111))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFiltrosLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelFiltrosLayout.createSequentialGroup()
                        .addGroup(jPanelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelFiltrosLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(spinnerHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelFiltrosLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(spinnerDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelFiltrosLayout.setVerticalGroup(
            jPanelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFiltrosLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerDesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spinnerHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkUsarFechas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(panelResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 151, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jPanelFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTituloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTituloActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed

        buscarEventos();

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void chkUsarFechasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUsarFechasActionPerformed
        boolean usarFechas = chkUsarFechas.isSelected();
        spinnerDesde.setEnabled(usarFechas);
        spinnerHasta.setEnabled(usarFechas);
    }//GEN-LAST:event_chkUsarFechasActionPerformed

    private void createCustomUI() {
        // Configuración básica de la ventana
        setTitle("Buscar Eventos");
        setSize(700, 600);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        // Panel principal con BorderLayout
        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
        mainPanel.setBorder(new EmptyBorder(10, 10, 10, 10));

        createSearchPanel();

        panelResultados.setLayout(new BoxLayout(panelResultados, BoxLayout.Y_AXIS));

        // Configuración mejorada del JScrollPane
        jScroll = new JScrollPane(panelResultados);;
        jScroll.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), "Resultados",
                TitledBorder.LEFT, TitledBorder.TOP));
        jScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScroll.getVerticalScrollBar().setUnitIncrement(16); // Mejora la velocidad de scroll

        // Añadir componentes al panel principal
        mainPanel.add(this.jPanelFiltros, BorderLayout.NORTH);
        mainPanel.add(jScroll, BorderLayout.CENTER);

        // Añadir panel principal al frame
        setContentPane(mainPanel);
    }

    private void createSearchPanel() {

        jPanelFiltros.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), "Filtros de búsqueda",
                TitledBorder.LEFT, TitledBorder.TOP));

        Calendar calDesde = Calendar.getInstance();
        Date inicioDesde = calDesde.getTime();
        calDesde.add(Calendar.YEAR, -10); // 10 años atrás
        Date minDesde = calDesde.getTime();
        calDesde.add(Calendar.YEAR, 20); // 10 años adelante
        Date maxDesde = calDesde.getTime();

        spinnerDesde.setModel(new SpinnerDateModel(inicioDesde, minDesde, maxDesde, Calendar.DAY_OF_MONTH));
        JSpinner.DateEditor editorDesde = new JSpinner.DateEditor(spinnerDesde, "dd/MM/yyyy");
        spinnerDesde.setEditor(editorDesde);
        spinnerDesde.setPreferredSize(new Dimension(150, 25));

        // Usar JSpinner con SpinnerDateModel para la fecha hasta
        Calendar calHasta = Calendar.getInstance();
        Date inicioHasta = calHasta.getTime();
        calHasta.add(Calendar.YEAR, -10); // 10 años atrás
        Date minHasta = calHasta.getTime();
        calHasta.add(Calendar.YEAR, 20); // 10 años adelante
        Date maxHasta = calHasta.getTime();

        spinnerHasta.setModel(new SpinnerDateModel(inicioHasta, minHasta, maxHasta, Calendar.DAY_OF_MONTH));
        JSpinner.DateEditor editorHasta = new JSpinner.DateEditor(spinnerHasta, "dd/MM/yyyy");
        spinnerHasta.setEditor(editorHasta);
        spinnerHasta.setPreferredSize(new Dimension(150, 25));

        chkUsarFechas.setSelected(false);

        spinnerDesde.setEnabled(false);
        spinnerHasta.setEnabled(false);

    }

    private void buscarEventos() {
        if (conn == null) {
            JOptionPane.showMessageDialog(this,
                    "Error: La conexión a la base de datos no está configurada",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        final String titulo = txtTitulo.getText().trim();
        final boolean usarFechas = chkUsarFechas.isSelected();
        final Date fechaDesde = usarFechas ? (Date) spinnerDesde.getValue() : null;
        final Date fechaHasta = usarFechas ? (Date) spinnerHasta.getValue() : null;

        if (usarFechas && fechaDesde != null && fechaHasta != null && fechaHasta.before(fechaDesde)) {
            JOptionPane.showMessageDialog(this,
                    "La fecha hasta no puede ser anterior a la fecha desde",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        final StringBuilder sql = new StringBuilder("SELECT ID_EVE, TIT_EVE, FEC_EVE, HOR_EVE, DES_EVE FROM EVENTOS WHERE ID_USU=?");

        if (!titulo.isEmpty()) {
            sql.append(" AND TIT_EVE LIKE ?");
        }

        if (usarFechas && fechaDesde != null) {
            sql.append(" AND FEC_EVE >= ?");
        }

        if (usarFechas && fechaHasta != null) {
            sql.append(" AND FEC_EVE <= ?");
        }

        sql.append(" ORDER BY FEC_EVE, HOR_EVE");

        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    panelResultados.removeAll();

                    try (PreparedStatement ps = conn.prepareStatement(sql.toString())) {
                        int paramIndex = 1;

                        ps.setInt(paramIndex++, id_usu); // <-- id_usu debe ser int

                        if (!titulo.isEmpty()) {
                            ps.setString(paramIndex++, "%" + titulo + "%");
                        }

                        if (usarFechas && fechaDesde != null) {
                            ps.setDate(paramIndex++, new java.sql.Date(fechaDesde.getTime()));
                        }

                        if (usarFechas && fechaHasta != null) {
                            ps.setDate(paramIndex++, new java.sql.Date(fechaHasta.getTime()));
                        }

                        try (ResultSet rs = ps.executeQuery()) {
                            boolean hayResultados = false;

                            while (rs.next()) {
                                hayResultados = true;

                                String idEvento = rs.getString("ID_EVE"); // <-- ahora es int
                                String tituloEvento = rs.getString("TIT_EVE");
                                Date fechaEvento = rs.getDate("FEC_EVE");
                                Date horaEvento = rs.getTime("HOR_EVE");
                                String descripcion = rs.getString("DES_EVE");

                                System.out.println("Evento encontrado: ID=" + idEvento + ", Título=" + tituloEvento);

                                List<Recordatorio> recordatorios = controlador.obtenerRecordatoriosEvento(
                                        idEvento);

                                JPanel panelEvento = crearPanelEvento(idEvento, tituloEvento,
                                        fechaEvento, horaEvento, descripcion, recordatorios);

                                panelResultados.add(panelEvento);
                                panelResultados.add(Box.createRigidArea(new Dimension(0, 10)));
                            }

                            if (!hayResultados) {
                                JLabel lblNoResultados = new JLabel("No se encontraron eventos con los criterios especificados");
                                lblNoResultados.setAlignmentX(Component.CENTER_ALIGNMENT);
                                lblNoResultados.setBorder(new EmptyBorder(20, 0, 0, 0));
                                panelResultados.add(lblNoResultados);
                            }
                        }
                    }
                } catch (SQLException ex) {
                    System.err.println("Error SQL: " + ex.getMessage());
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(BuscarEventoVista1.this,
                            "Error al buscar eventos: " + ex.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
                return null;
            }

            @Override
            protected void done() {
                panelResultados.revalidate();
                panelResultados.repaint();
            }
        }.execute();
    }

    private JPanel crearPanelEvento(final String idEvento, final String titulo,
            final Date fecha, final Date hora, final String descripcion,
            final List<Recordatorio> recordatorios) {

        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout(10, 5));
        panel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(java.awt.Color.GRAY),
                BorderFactory.createEmptyBorder(10, 10, 10, 10)));

        panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 200));

        JPanel infoPanel = new JPanel();
        infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));

        JLabel lblTitulo = new JLabel(titulo);
        lblTitulo.setFont(new Font("Arial", Font.BOLD, 14));
        lblTitulo.setAlignmentX(Component.LEFT_ALIGNMENT);

        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");

        String fechaHoraStr = dateFormat.format(fecha);
        if (hora != null) {
            fechaHoraStr += " " + timeFormat.format(hora);
        }
        JLabel lblFechaHora = new JLabel(fechaHoraStr);
        lblFechaHora.setFont(new Font("Arial", Font.PLAIN, 12));
        lblFechaHora.setAlignmentX(Component.LEFT_ALIGNMENT);

        JLabel lblDescripcion = new JLabel(descripcion != null ? descripcion : "");
        lblDescripcion.setFont(new Font("Arial", Font.ITALIC, 12));
        lblDescripcion.setAlignmentX(Component.LEFT_ALIGNMENT);

        infoPanel.add(lblTitulo);
        infoPanel.add(Box.createRigidArea(new Dimension(0, 5)));
        infoPanel.add(lblFechaHora);
        infoPanel.add(Box.createRigidArea(new Dimension(0, 5)));
        infoPanel.add(lblDescripcion);

        JPanel panelRecordatorios = new JPanel();
        panelRecordatorios.setLayout(new BoxLayout(panelRecordatorios, BoxLayout.Y_AXIS));
        panelRecordatorios.setAlignmentX(Component.LEFT_ALIGNMENT);

        if (!recordatorios.isEmpty()) {
            JLabel lblRecordatorios = new JLabel("Recordatorios:");
            lblRecordatorios.setFont(new Font("Arial", Font.BOLD, 12));
            lblRecordatorios.setAlignmentX(Component.LEFT_ALIGNMENT);
            panelRecordatorios.add(lblRecordatorios);
            panelRecordatorios.add(Box.createRigidArea(new Dimension(0, 5)));

            for (Recordatorio rec : recordatorios) {
                JPanel panelRec = new JPanel(new FlowLayout(FlowLayout.LEFT));
                panelRec.setAlignmentX(Component.LEFT_ALIGNMENT);

                String tiempoStr = formatearTiempoRecordatorio(rec.getMinutosAntes());

                JLabel lblRec = new JLabel("• " + tiempoStr + (rec.isActivo() ? " (Activo)" : " (Inactivo)"));
                lblRec.setFont(new Font("Arial", Font.PLAIN, 11));

                panelRec.add(lblRec);

                JButton btnEliminar = new JButton("Eliminar");
                btnEliminar.setFont(new Font("Arial", Font.PLAIN, 10));
                btnEliminar.addActionListener((ActionEvent e) -> {
                    try {
                        controlador.eliminarRecordatorio(rec.getId());
                        JOptionPane.showMessageDialog(BuscarEventoVista1.this,
                                "Recordatorio eliminado correctamente",
                                "Información", JOptionPane.INFORMATION_MESSAGE);
                        buscarEventos();
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(BuscarEventoVista1.this,
                                "Error al eliminar recordatorio: " + ex.getMessage(),
                                "Error", JOptionPane.ERROR_MESSAGE);
                    }
                });

                panelRec.add(btnEliminar);

                panelRecordatorios.add(panelRec);
            }
        } else {
            JLabel lblNoRecordatorios = new JLabel("No hay recordatorios para este evento");
            lblNoRecordatorios.setFont(new Font("Arial", Font.ITALIC, 11));
            lblNoRecordatorios.setAlignmentX(Component.LEFT_ALIGNMENT);
            panelRecordatorios.add(lblNoRecordatorios);
        }

        // Aquí envolvemos el panel de recordatorios en un JScrollPane para scroll
        infoPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        JScrollPane scrollRecordatorios = new JScrollPane(panelRecordatorios);
        scrollRecordatorios.setPreferredSize(new Dimension(300, 100)); // Tamaño visible del scroll
        scrollRecordatorios.setAlignmentX(Component.LEFT_ALIGNMENT);
        infoPanel.add(scrollRecordatorios);

        JPanel panelBoton = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        JButton btnRecordatorio = new JButton("Crear Recordatorio");
        btnRecordatorio.addActionListener((ActionEvent e) -> {
            mostrarDialogoRecordatorio(idEvento, titulo, fecha, hora);
        });
        panelBoton.add(btnRecordatorio);

        panel.add(infoPanel, BorderLayout.CENTER);
        panel.add(panelBoton, BorderLayout.SOUTH);

        return panel;
    }

    private String formatearTiempoRecordatorio(int minutosAntes) {
        if (minutosAntes < 60) {
            return minutosAntes + " minutos antes";
        } else if (minutosAntes < 1440) { // menos de un día
            int horas = minutosAntes / 60;
            int minutos = minutosAntes % 60;
            if (minutos == 0) {
                return horas + (horas == 1 ? " hora antes" : " horas antes");
            } else {
                return horas + (horas == 1 ? " hora y " : " horas y ")
                        + minutos + " minutos antes";
            }
        } else { // un día o más
            int dias = minutosAntes / 1440;
            int horasRestantes = (minutosAntes % 1440) / 60;
            if (horasRestantes == 0) {
                return dias + (dias == 1 ? " día antes" : " días antes");
            } else {
                return dias + (dias == 1 ? " día y " : " días y ")
                        + horasRestantes + (horasRestantes == 1 ? " hora antes" : " horas antes");
            }
        }
    }

    private void mostrarDialogoRecordatorio(final String idEvento, final String titulo,
            final Date fecha, final Date hora) {

        // Crear panel para el diálogo
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setPreferredSize(new Dimension(350, 250));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 8, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Título del evento
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        JLabel lblTitulo = new JLabel("Evento: " + titulo);
        lblTitulo.setFont(new Font("Arial", Font.BOLD, 14));
        panel.add(lblTitulo, gbc);

        // Minutos antes
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 1;
        gbc.anchor = GridBagConstraints.EAST;
        panel.add(new JLabel("Recordar con anticipación:"), gbc);

        // Opciones predefinidas
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;

        // Crear un combo con opciones predefinidas
        final JComboBox<String> comboTiempo = new JComboBox<>(new String[]{
            "5 minutos antes",
            "15 minutos antes",
            "30 minutos antes",
            "1 hora antes",
            "2 horas antes",
            "1 día antes",
            "Personalizado..."
        });
        panel.add(comboTiempo, gbc);

        // Panel para tiempo personalizado (inicialmente oculto)
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        final JPanel panelPersonalizado = new JPanel(new FlowLayout(FlowLayout.LEFT));
        final JSpinner spinnerMinutos = new JSpinner(new SpinnerNumberModel(15, 1, 10080, 1));
        panelPersonalizado.add(new JLabel("Minutos antes:"));
        panelPersonalizado.add(spinnerMinutos);
        panelPersonalizado.setVisible(false);
        panel.add(panelPersonalizado, gbc);

        // Mostrar panel personalizado cuando se selecciona "Personalizado..."
        comboTiempo.addActionListener((ActionEvent e) -> {
            panelPersonalizado.setVisible(comboTiempo.getSelectedItem().equals("Personalizado..."));
            panel.revalidate();
            panel.repaint();
        });

        // Mostrar diálogo
        int result = JOptionPane.showConfirmDialog(this, panel,
                "Crear Recordatorio", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            // Obtener minutos antes seleccionados
            int minutosAntes;
            String seleccion = (String) comboTiempo.getSelectedItem();

            if (seleccion.equals("Personalizado...")) {
                minutosAntes = (int) spinnerMinutos.getValue();
            } else {
                // Convertir selección a minutos
                switch (seleccion) {
                    case "5 minutos antes":
                        minutosAntes = 5;
                        break;
                    case "15 minutos antes":
                        minutosAntes = 15;
                        break;
                    case "30 minutos antes":
                        minutosAntes = 30;
                        break;
                    case "1 hora antes":
                        minutosAntes = 60;
                        break;
                    case "2 horas antes":
                        minutosAntes = 120;
                        break;
                    case "1 día antes":
                        minutosAntes = 1440;
                        break;
                    default:
                        minutosAntes = 15;
                }
            }

            // Crear recordatorio
            crearRecordatorio(idEvento, minutosAntes);
        }
    }

    private void crearRecordatorio(final String idEvento, final int minutosAntes) {
        try {
            controlador.crearRecordatorio(new Recordatorio(idEvento, minutosAntes, true, id_usu));
            JOptionPane.showMessageDialog(this,
                    "Recordatorio creado correctamente",
                    "Información", JOptionPane.INFORMATION_MESSAGE);
            buscarEventos(); // Refrescar la vista para mostrar el nuevo recordatorio
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error al crear recordatorio: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JCheckBox chkUsarFechas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanelFiltros;
    private javax.swing.JScrollPane jScroll;
    private javax.swing.JPanel panelResultados;
    private javax.swing.JSpinner spinnerDesde;
    private javax.swing.JSpinner spinnerHasta;
    private javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables
}
